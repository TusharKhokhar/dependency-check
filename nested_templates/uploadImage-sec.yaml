AWSTemplateFormatVersion: 2010-09-09
Description: >-
  upload image rules and event bus
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Type: String
  Domain:
    Type: String
  DomainName:
    Type: String
  ApiKey:
    Type: String
  RegionType:
    Type: String
  BaseDomainName:
    Type: String
  RegionTypeMain:
    Type: String
  MongoDBConnection:
    Type: String
  DatabaseName:
    Type: String
  Environment:
    Type: String
    Default: server
  AxiosMaxRetries:
    Type: String
    Default: "3"

Resources:

  Fileprocess:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub 'fileprocessupload-${RegionType}'

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref S3BucketUploadEventFunc
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::*

  S3BucketUploadEventFunc:
    Type: AWS::Serverless::Function
    DependsOn: Fileprocess
    Properties:
      Handler: handler.lambda_handler
      Runtime: python3.12
      Tracing: Active
      MemorySize: 128
      Timeout: 5
      CodeUri: ../s3PutEvent/
      Description: triggers when a new file is created
      Environment:
        Variables:
          eventBusName: !Sub 'fileprocessupload-${RegionType}'
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Role: !GetAtt S3BucketUploadEventFuncIAMRole.Arn # Reference the unique IAM role
      # Policies:
      #   - Statement:
      #       - Effect: Allow
      #         Action:
      #           - 'events:PutEvents'
      #         Resource: !GetAtt Fileprocess.Arn
              
  S3BucketUploadEventFuncIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cloud-saas-api-S3BucketUploadEventFuncIAMRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:lambda:*:${AWS::AccountId}:function:*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: LambdaPutEventBusPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - !GetAtt Fileprocess.Arn
                  - !Sub "arn:aws:events:*:${AWS::AccountId}:event-bus/fileprocessupload"

  S3BucketConvertedEventFunc:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 30
      CodeUri: ../s3EventConverted/
      Description: triggers when a new file is created
      Role: !GetAtt S3BucketConvertedEventFuncIAMRole.Arn
      Environment:
        Variables:
          domainName: !Ref Domain
      Layers:
        - !Ref DependenciesLayerAPICall
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
  S3BucketConvertedEventFuncIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cloud-saas-api-S3BucketConvertedEventFuncIAMRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
  EmailParserFunc:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 2048
      Timeout: 256
      CodeUri: ../emailEventFunction/
      Description: triggers when a new email is received
      Layers:
        - !Ref DependenciesLayerAPICall
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Environment:
        Variables:
          domainName: !Ref Domain
          bucketName: !Sub "cloud-${BaseDomainName}-${RegionType}-${Stage}"
          urlDomain: !Ref DomainName
          publicApiId: !Ref ApiKey
          minimumAttachmentSize: 7
          maximumAttachmentLimit: 25
          mongoDBConnection: !Ref MongoDBConnection
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage] ]
          awsAccountNumber: !Ref AWS::AccountId
          environment: !Ref Environment
          region: !Ref "AWS::Region"
          axiosMaxRetries: !Ref AxiosMaxRetries
      Role: !GetAtt EmailParserFuncIamRole.Arn  # Refer to the new unique role here

  # Define a new unique IAM role
  EmailParserFuncIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cloud-saas-api-EmailParserFuncIamRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::*
      # Policies:
      #   - Statement:
      #       - Effect: Allow
      #         Action:
      #           - 's3:GetObject'
      #         Resource: !Sub arn:aws:s3:::*

  EmailParserFuncLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EmailParserFunc
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::*

  DependenciesLayerAPICall:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: server-layer-axios
      Description: utility dependencies.
      ContentUri: ../emailEventFunction/dependencies/
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs20.x

  PythonImageLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: conversion_lay
      Description: utility dependencies.
      ContentUri: ../pythonImgConversion/dependencies/
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.11

  S3InvokeLambdaPermissionConverted:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref S3BucketConvertedEventFunc
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::*

  PutConfigurations:
    Properties:
      Code:
        ZipFile: |
          const { S3Client, PutBucketNotificationConfigurationCommand, PutBucketLifecycleConfigurationCommand, PutPublicAccessBlockCommand } = require('@aws-sdk/client-s3');

          module.exports.handler = async (event, context) => {
            console.log('event--->>>', event);
            const s3 = new S3Client({ region: event.ResourceProperties.DestBucketRegion });

            try {
              if (event.RequestType === 'Create' || event.RequestType === 'Update') {
                const bucketParams = {
                  Bucket: event.ResourceProperties.DestBucketName,
                  NotificationConfiguration: {
                    LambdaFunctionConfigurations: [{
                      LambdaFunctionArn: event.ResourceProperties.LambdaArn,
                      Events: ['s3:ObjectCreated:*'],
                      Filter: {
                        Key: {
                          FilterRules: [
                            {
                              Name: 'prefix',
                              Value: 'PublicUploads/'
                            }
                          ]
                        }
                      },
                      Id: '001'
                    }, {
                      LambdaFunctionArn: event.ResourceProperties.EmailLambdaArn,
                      Events: ['s3:ObjectCreated:Put'],
                      Filter: {
                        Key: {
                          FilterRules: [
                            {
                              Name: 'prefix',
                              Value: 'Email/'
                            }
                          ]
                        }
                      },
                      Id: '002'
                    }, {
                      LambdaFunctionArn: event.ResourceProperties.ImportLambdaArn,
                      Events: ['s3:ObjectCreated:Put'],
                      Filter: {
                        Key: {
                          FilterRules: [
                            {
                              Name: 'prefix',
                              Value: 'Import/'
                            }
                          ]
                        }
                      },
                      Id: '003'
                    }]
                  }
                };

                const bucketParamsLifeCycle = {
                  Bucket: event.ResourceProperties.DestBucketName,
                  LifecycleConfiguration: {
                    Rules: [
                      {
                        Expiration: {
                          Days: 1
                        },
                        NoncurrentVersionExpiration: {
                          NoncurrentDays: 1
                        },
                        Filter: {
                          Prefix: "PublicUploads/"
                        },
                        ID: "DeletePublicUploadJob1",
                        Status: "Enabled"
                      },
                      {
                        Expiration: {
                          Days: 7
                        },
                        NoncurrentVersionExpiration: {
                          NoncurrentDays: 1
                        },
                        Filter: {
                          Prefix: "EmailService/"
                        },
                        ID: "DeleteEmailServiceFilesRule",
                        Status: "Enabled"
                      },
                      {
                        Expiration: {
                          Days: 1
                        },
                        NoncurrentVersionExpiration: {
                          NoncurrentDays: 1
                        },
                        Filter: {
                          Prefix: "Reports/"
                        },
                        ID: "ReportsDeletionJob2",
                        Status: "Enabled"
                      },
                      {
                        Expiration: {
                          Days: 1
                        },
                        NoncurrentVersionExpiration: {
                          NoncurrentDays: 1
                        },
                        Filter: {
                          Prefix: "Email/"
                        },
                        ID: "EmailDeletionRule3",
                        Status: "Enabled"
                      },
                      {
                        Expiration: {
                          Days: 1
                        },
                        NoncurrentVersionExpiration: {
                          NoncurrentDays: 1
                        },
                        Filter: {
                          Prefix: "Import/"
                        },
                        ID: "ImportDeletionRule3",
                        Status: "Enabled"
                      }
                    ]
                  }
                };

                const paramsUpdate = {
                  Bucket: event.ResourceProperties.DestBucketName,
                  PublicAccessBlockConfiguration: {
                    BlockPublicAcls: true,
                    IgnorePublicAcls: true,
                    BlockPublicPolicy: true,
                    RestrictPublicBuckets: true
                  }
                };

                await s3.send(new PutBucketNotificationConfigurationCommand(bucketParams));
                console.log('Bucket notification configuration updated successfully');

                await s3.send(new PutBucketLifecycleConfigurationCommand(bucketParamsLifeCycle));
                console.log('Bucket lifecycle configuration updated successfully');

                await s3.send(new PutPublicAccessBlockCommand(paramsUpdate));
                console.log('Bucket public access block updated successfully');

                await send(event, context, "SUCCESS", {}, event.ResourceProperties.DestBucketName);
              } else {
                await send(event, context, "SUCCESS");
                console.log('Job done!');
              }
            } catch (error) {
              console.error(error);
              await send(event, context, "FAILED", error);
            }
          };
          const send = async (event, context, responseStatus, responseData, physicalResourceId, noEcho) => {
            let responseBody = JSON.stringify({
              Status: responseStatus,
              Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
              PhysicalResourceId: physicalResourceId || context.logStreamName,
              StackId: event.StackId,
              RequestId: event.RequestId,
              LogicalResourceId: event.LogicalResourceId,
              NoEcho: noEcho || false,
              Data: responseData
            });
            console.log("Response body:\n", responseBody);
            const myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/json");
              const requestOptions = {
              method: "PUT",
              headers: myHeaders,
              body: responseBody,
              redirect: "follow"
            };
            const response = await fetch(event.ResponseURL, requestOptions);
            if (response.ok) {
              console.log(response.ok);
              }
          }
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Timeout: 29
      MemorySize: 128
      Description: A Lambda function for creation of resources in secondary region
    Type: "AWS::Lambda::Function"

  ImportLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cloud-saas-api-ImportLambdaIamRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::*
        - PolicyName: LambdaIoTAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:*
                Resource: "*"
        - PolicyName: LambdaSecretAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - secretsmanager:ListSecrets
                  - ec2:CreateNetworkInterface
                Resource:
                  - "*"
        - PolicyName: LambdaEmailAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource:
                  - "*"

  AssumeRoleSTS:
    Type: AWS::IAM::Role
    DependsOn:
      - ImportLambdaRole
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
          - Effect: Allow
            Principal:
              AWS: !GetAtt ImportLambdaRole.Arn
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::*
        - PolicyName: LambdaIoTAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:*
                Resource: "*"
        - PolicyName: LambdaSecretAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - secretsmanager:ListSecrets
                  - ec2:CreateNetworkInterface
                Resource:
                  - "*"
        - PolicyName: LambdaEmailAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource:
                  - "*"

  ImportLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 300
      CodeUri: ../importLambda/
      Description: triggers when a new file is created
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: ''
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage ] ]
          stage: 'Prod'
          S3BucketTenantUploads: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}'
          S3BucketTenantUploadsConverted: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}-converted'
          domainName: !Ref DomainName
          Stage: !Ref Stage
          senderEmail: !Sub 'DoNotReply@${DomainName}'
          roleName: !Ref AssumeRoleSTS
          awsAccountNumber: !Sub "${AWS::AccountId}"
          environment: "server"
      Layers:
        - !Ref DependenciesLayerAPICall
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Role: !GetAtt S3BucketUploadEventFuncIAMRole.Arn

  ImportLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ImportLambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::*

  S3BucketTenantUploadsFiles:
    Type: Custom::LambdaTrig
    Properties:
      ServiceToken: !GetAtt PutConfigurations.Arn
      DestBucketName: !Sub "cloud-${BaseDomainName}-${RegionType}-${Stage}"
      DestBucketNameConverted: !Sub "cloud-${BaseDomainName}-${RegionType}-${Stage}-converted"
      DestBucketRegion: 'us-west-2'
      LambdaArn: !GetAtt S3BucketUploadEventFunc.Arn
      EmailLambdaArn: !GetAtt EmailParserFunc.Arn
      ImportLambdaArn: !GetAtt ImportLambda.Arn
      DestinationBucketArn: !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionTypeMain}-${Stage}-converted'

  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: Allow
                Resource: "arn:aws:logs:*:*:*"
              - Action:
                  - "s3:*"
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: LambdaExecutionRolePolicyBucket
    Type: "AWS::IAM::Role"

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub "cloud-${BaseDomainName}-${RegionType}-${Stage}"
      PolicyDocument:
        Statement:
          - Sid: AllowSESPuts
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}/*'
            Condition:
              StringEquals:
                aws:Referer: !Ref AWS::AccountId

  SesRuleSet:
    Type: 'AWS::SES::ReceiptRuleSet'
    Properties:
      RuleSetName: !Sub 'ses-rule-set-${Stage}-${RegionType}'

  SesRule:
    Type: 'AWS::SES::ReceiptRule'
    DependsOn:
      - S3BucketTenantUploadsFiles
      - BucketPolicy
    Properties:
      Rule:
        Actions:
          - S3Action:
              BucketName: !Sub "cloud-${BaseDomainName}-${RegionType}-${Stage}"
              ObjectKeyPrefix: Email
        Enabled: true
        ScanEnabled: true
      RuleSetName: !Ref SesRuleSet
  #  lambda functions

  ContainerizedLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/asposetotal:latest'
      Description: 'Containerized lambda used for file conversion'
      MemorySize: 10000
      PackageType: 'Image'
      Role: !GetAtt 'LambdaRoleForConvFunctions.Arn'
      Timeout: 900


  PubFileContainerizedLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/libreoffice:latest'
      Architectures:
        - x86_64
      Description: 'Containerized lambda used for .pub file conversion'
      MemorySize: 10000
      PackageType: 'Image'
      Role: !GetAtt 'LambdaRoleForConvFunctions.Arn'
      Timeout: 900

  PythonImageLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      MemorySize: 10240
      Role: !GetAtt 'LambdaRoleForConvFunctions.Arn'
      Timeout: 900
      CodeUri: ../pythonImgConversion/handler/
      Layers:
        - !Ref PythonImageLayer
        - 'arn:aws:lambda:us-west-2:770693421928:layer:Klayers-p311-Pillow:8'
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"

  ErrorLogsConversionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 29
      CodeUri: ../logFileConversionError/
      Role: !GetAtt 'LambdaRoleForConvFunctions.Arn'
      Description: Error stream in the cloudwatch logs for conversion of file will trigger this lambda
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage ] ]
          stage: 'Prod'
          S3BucketTenantUploads: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}'
          S3BucketTenantUploadsConverted: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}-converted'
          domainName: !Ref Domain
      Layers:
        - !Ref DependenciesLayerAPICall
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ErrorLogsConversionFunction
      Action: "lambda:InvokeFunction"
      Principal: "logs.amazonaws.com"
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${PythonImageLambda}:*'


  PermissionForEventsToInvokeLambdaPubFile:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ErrorLogsConversionFunction
      Action: "lambda:InvokeFunction"
      Principal: "logs.amazonaws.com"
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${PubFileContainerizedLambda}:*'

  PermissionForEventsToInvokeLambdaContainer:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ErrorLogsConversionFunction
      Action: "lambda:InvokeFunction"
      Principal: "logs.amazonaws.com"
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ContainerizedLambda}:*'

  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: PermissionForEventsToInvokeLambda
    Properties:
      DestinationArn: !GetAtt ErrorLogsConversionFunction.Arn
      LogGroupName:
        Fn::Join:
          - ''
          - - "/aws/lambda/"
            - Ref: PythonImageLambda
      FilterPattern: "Error Processing File"


  PubFileContainerizedLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PubFileContainerizedLambda}'
      RetentionInDays: 30


  SubscriptionFilterPubFile:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - PermissionForEventsToInvokeLambdaPubFile
      - PubFileContainerizedLambdaLogGroup
    Properties:
      DestinationArn: !GetAtt ErrorLogsConversionFunction.Arn
      LogGroupName:
        Fn::Join:
          - ''
          - - "/aws/lambda/"
            - Ref: PubFileContainerizedLambda
      FilterPattern: "Error Processing File"

  SubscriptionFilter2:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: PermissionForEventsToInvokeLambdaContainer
    Properties:
      DestinationArn: !GetAtt ErrorLogsConversionFunction.Arn
      LogGroupName:
        Fn::Join:
          - ''
          - - "/aws/lambda/"
            - Ref: ContainerizedLambda
      FilterPattern: "Error Processing File"

  LambdaRoleForConvFunctions:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
          - Sid: Statement2
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
      Path: /
      Policies:
        - PolicyName: tenantBucketInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - s3:Get*
                - s3:Put*
              Effect: Allow
              Resource:
                - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}/PublicUploads/*'
                - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}-converted/PublicUploads/*'
        - PolicyName: ECRImageAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - ecr:SetRepositoryPolicy
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:DescribeImages
                  - ecr:DescribeRepositories
                  - ecr:UploadLayerPart
                  - ecr:ListImages
                  - ecr:InitiateLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetRepositoryPolicy
                  - ecr:PutImage
                Resource: "*"
              - Sid: VisualEditor1
                Effect: Allow
                Action: ecr:GetAuthorizationToken
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  AsposeTotalRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Image: all types"
      EventBusName: !GetAtt Fileprocess.Name
      EventPattern:
        detail-type:
          - S3PutEventTrigger
        source:
          - my-custom-event
        detail:
          File_extension:
            - ".doc"
            - ".docx"
            - ".rtf"
            - ".txt"
            - ".htm"
            - ".html"
            - ".xml"
            - ".ppt"
            - ".pptx"
            - ".xls"
            - ".xlsx"
            - ".pdf"
            - ".svg"
            - ".epub"
            - ".vsd"
            - ".xps"
            - ".oxps"
            - ".odt"
            - ".odp"
            - ".ods"
            - ".svg"
            - ".epub"
            - ".vsd"
            - ".oxps"
            - ".wmf"
            - ".webp"
      Name: AsposeTotalConv
      Targets:
        - Arn: !GetAtt
            - ContainerizedLambda
            - Arn
          Id: Id20


  PubFileRule:
    Type: AWS::Events::Rule
    Properties:
      Description: ".pub file conversion"
      EventBusName: !GetAtt Fileprocess.Name
      EventPattern:
        detail-type:
          - S3PutEventTrigger
        source:
          - my-custom-event
        detail:
          File_extension:
            - ".pub"
      Name: PubFileConversion
      Targets:
        - Arn: !GetAtt
            - PubFileContainerizedLambda
            - Arn
          Id: Id22

  ImageRules:
    Type: AWS::Events::Rule
    Properties:
      Description: "Images conversion"
      EventBusName: !GetAtt Fileprocess.Name
      EventPattern:
        detail-type:
          - S3PutEventTrigger
        source:
          - my-custom-event
        detail:
          File_extension:
            - ".png"
            - ".jpg"
            - ".jpeg"
            - ".heic"
            - ".gif"
            - ".bmp"
            - ".tif"
            - ".tiff"
            - ".heif"
      Name: ImageConversion
      Targets:
        - Arn: !GetAtt
            - PythonImageLambda
            - Arn
          Id: Id21

  EventBridgeLambdaPermissionAsposeTotal:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ContainerizedLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AsposeTotalRule.Arn

  EventBridgeLambdaPermissionPubFile:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PubFileContainerizedLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PubFileRule.Arn

  EventBridgeLambdaPermissionImageConversion:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PythonImageLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ImageRules.Arn

Outputs:
  BucketArn:
    Value: !Ref S3BucketTenantUploadsFiles


