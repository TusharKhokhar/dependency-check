AWSTemplateFormatVersion: 2010-09-09
Description: >-
  cloud saas backend template
Transform:
  - AWS::Serverless-2016-10-31
Globals:
  Api:
    EndpointConfiguration: REGIONAL
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,tier,Tier,apiKey,apikey,subdomain'"
      AllowMethods: "'GET,PUT,POST,PATCH,DELETE,OPTIONS'"
Parameters:
  DomainName:
    Type: String
  MongoDBConnection:
    Type: String
  DatabaseName:
    Type: String
  Stage:
    Type: String
  BucketStage:
    Type: String
  Environment:
    Type: String
  APIDomain:
    Type: String
  ApiKey:
    Type: String
  Sha1Algorithm:
    Type: String

#frontend params

  BucketName:
    Type: String
  MultiregionEndpoint:
    Type: String
  WebSocketDomainName:
    Type: String
  WildCardDomain:
    Type: String
  RootDomainName:
    Type: String
  HostedZoneID:
    Type: String
  BackupRegion:
    Description: failover region
    Type: String
  ReplicationBucketName:
    Description: replication bucket name
    Type: String
  BaseDomainName:
    Description: bucket name for files
    Type: String
  ReplicationRegion:
    Description: replication bucket region
    Type: String
  FixedCloudfrontZoneId:
    Description: replication bucket region
    Type: String
  RegionTypeSecondary:
    Type: String
  MainAccountNo:
    Type: Number
  RegionType:
    Type: String
  JwtTokenExpiry:
    Type: String
  RefreshTokenExpiry:
    Type: String
  IotTokenExpiry:
    Type: String
  QAAccountNumber:
    Type: String
    Default: ''
  ProdAccountNumber:
    Type: String
    Default: '807812734727'
  SMSQueueName:
    Type: String
    Default: 'cloud-saas-sms-queue'

Resources:

  MongoDBReadWriteAccess:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MongoDBReadWriteAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowAllRoleToAssume
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sts:AssumeRole
            Condition:
              StringLike:
                aws:PrincipalArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/cloud-saas-api*"
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole

  cloudfrontStack:
    Type: AWS::Serverless::Application
    DependsOn: CacheInvalidate
    Properties:
      Location: frontend/staging.yaml
      Parameters:
        InvalidateCacheLambdaArn: !GetAtt CacheInvalidate.Arn
        BucketName: !Ref BucketName
        MultiregionEndpoint: !Ref MultiregionEndpoint
        WebSocketDomainName: !Ref WebSocketDomainName
        WildCardDomain: !Ref WildCardDomain
        RootDomainName: !Ref RootDomainName
        HostedZoneID: !Ref HostedZoneID
        StagingAccountNo: !Ref AWS::AccountId
        MainAccountNo: !Ref MainAccountNo
        BackupRegion: !Ref BackupRegion
        ReplicationBucketName: !Ref ReplicationBucketName
        ReplicationRegion: !Ref ReplicationRegion
        FixedCloudfrontZoneId: !Ref FixedCloudfrontZoneId
        DomainName: !Ref DomainName
        Stage: !Ref Stage
        RegionHealthEndpoint: !Sub "${MyApi}.execute-api.${AWS::Region}.amazonaws.com"

  MobileCloudFrontStack:
    Type: AWS::Serverless::Application
    DependsOn:
      - CacheInvalidate
      - cloudfrontStack
    Properties:
      Location: frontend/mobile.yaml
      Parameters:
        InvalidateCacheLambdaArn: !GetAtt CacheInvalidate.Arn
        BucketName: !Sub '${BucketName}-mob'
        RootDomainName: !Ref RootDomainName
        HostedZoneID: !Ref HostedZoneID
        MainAccountNo: !Ref MainAccountNo
        ReplicationBucketName: !Sub '${BucketName}-mobsec'
        ReplicationRegion: !Ref ReplicationRegion
        FixedCloudfrontZoneId: !Ref FixedCloudfrontZoneId
        DomainName: !Sub 'mobile.${DomainName}'
        ACMCertificate: !GetAtt cloudfrontStack.Outputs.ACMCertificateArn
        Stage: !Ref Stage

  PwaCloudFrontStack:
    Type: AWS::Serverless::Application
    DependsOn:
      - CacheInvalidate
      - cloudfrontStack
    Properties:
      Location: frontend/app.yaml
      Parameters:
        InvalidateCacheLambdaArn: !GetAtt CacheInvalidate.Arn
        BucketName: !Sub '${BucketName}-pwa'
        RootDomainName: !Ref RootDomainName
        HostedZoneID: !Ref HostedZoneID
        MainAccountNo: !Ref MainAccountNo
        ReplicationBucketName: !Sub '${BucketName}-pwasec'
        ReplicationRegion: !Ref ReplicationRegion
        FixedCloudfrontZoneId: !Ref FixedCloudfrontZoneId
        DomainName: !Sub 'pwa.${DomainName}'
        ACMCertificate: !GetAtt cloudfrontStack.Outputs.ACMCertificateArn
        Stage: !Ref Stage

  WebSocketAPIs:
    Type: AWS::Serverless::Application
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Location: nested_templates/websockets.yaml
      Parameters:
        BucketStage: !Ref BucketStage
        MongoDBConnection: !Ref MongoDBConnection
        DatabaseName: !Ref DatabaseName
        StageDeployment: !Ref Stage
        DomainName: !Ref DomainName
        Stage: !Ref Stage
        BaseDomainName: !Ref BaseDomainName
        RegionType: !Ref RegionType
        MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'

  SecondaryRegionBuckets:
    Type: AWS::Serverless::Application
    Properties:
      Location: nested_templates/primaryRegionDependency.yaml
      Parameters:
        Stage: !Ref Stage
        RegionType: !Ref RegionTypeSecondary
        BaseDomainName: !Ref BaseDomainName

  FileUploadApp:
    DependsOn:
      - SecondaryRegionBuckets
      - MongoDBReadWriteAccess
    Type: AWS::Serverless::Application
    Properties:
      Location: nested_templates/uploadImage.yaml
      Parameters:
        Domain: !Ref APIDomain
        Stage: !Ref Stage
        ApiKey: !Ref ApiKey
        DomainName: !Ref DomainName
        ReplicationBucketName: !Sub 'cloud-${BaseDomainName}-${RegionTypeSecondary}-${Stage}'
        BaseDomainName: !Ref BaseDomainName
        RegionType: !Ref RegionType
        MongoDBConnection: !Ref MongoDBConnection
        DatabaseName: !Ref DatabaseName
        MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'

  FargateService:
    DependsOn:
      - SecondaryRegionBuckets
      - MongoDBReadWriteAccess
    Type: AWS::Serverless::Application
    Properties:
      Location: nested_templates/fargate.yaml
      Parameters:
        Domain: !Ref APIDomain
        Stage: !Ref Stage
        DomainName: !Ref DomainName
        ReplicationBucketName: !Sub 'cloud-${BaseDomainName}-${RegionTypeSecondary}-${Stage}'
        BaseDomainName: !Ref BaseDomainName
        RegionType: !Ref RegionType
        MongoDBConnection: !Ref MongoDBConnection
        HostedZoneID: !Ref HostedZoneID
        DatabaseName: !Ref DatabaseName
        MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
        ACMCertificate: !GetAtt cloudfrontStack.Outputs.ACMCertificateArn

  IAMUser:
    Type: AWS::Serverless::Application
    Properties:
      Location: nested_templates/iam.yaml
      Parameters:
        Stage: !Ref Stage
        DomainName: !Ref DomainName
        BucketName: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}'
        SecondaryBucketName: !Sub 'cloud-${BaseDomainName}-${RegionTypeSecondary}-${Stage}'
        ConvertedBucketName: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}-converted'
        SecondaryConvertedBucketName: !Sub 'cloud-${BaseDomainName}-${RegionTypeSecondary}-${Stage}-converted'

  MyApi:
    Type: "AWS::Serverless::Api"
    Properties:
      StageName: 'Prod'
      TracingEnabled: true
      BinaryMediaTypes: ["*/*"]

  AssumeRoleSTS:
    Type: AWS::IAM::Role
    DependsOn:
      - apiLambdaFunctionRole
      - MongoDBReadWriteAccess
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
          - Effect: Allow
            Principal:
              AWS: !GetAtt apiLambdaFunctionRole.Arn
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS: !GetAtt MongoDBReadWriteAccess.Arn
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: tenantBucketInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - "s3:ListBucket"
                  - 's3:Delete*'
                Resource:
                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}/*'
                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}'
                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}-converted/*'
        - PolicyName: sendEmailPolicy
          PolicyDocument:
            Version: '2008-10-17'
            Statement: [
              {"Effect":"Allow","Action":"ses:SendRawEmail","Resource":"*"},
                        {"Effect":"Allow","Action":"ses:SendEmail","Resource":"*"}]
        - PolicyName: iotPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:*
                Resource: "*"
        - PolicyName: websocketPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                  - execute-api:ManageConnections
                Resource: arn:aws:execute-api:*:*:*
        - PolicyName: cloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource: "*"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer
      Description: graphql and other utility dependencies.
      ContentUri: graphql/dependencies/
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs20.x

  AWSSdkLayerV2:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: aws-sdk-v2
      Description: aws-sdk layer
      ContentUri: awsLambdaLayerV2/dependencies/
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs20.x

  graphqlFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AssumeRoleSTS
      - MongoDBReadWriteAccess
    Properties:
      Handler: graphql.handler
      CodeUri: graphql/
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt apiLambdaFunctionRole.Arn
      Description: A Lambda function that return data returned from grahpql and lambda logics
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          awsAccountNumber: !Ref AWS::AccountId
          roleName: !Ref AssumeRoleSTS
          environment: !Ref Environment
          S3BucketTenantUploads: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}'
          S3BucketTenantUploadsConverted: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}-converted'
          mongoDBConnection: !Ref MongoDBConnection
          dbName: !Join [ "",[!Ref DatabaseName, "-",!Ref Stage] ]
          domainName: !Ref DomainName
          Stage: !Ref Stage
          senderEmail: !Sub 'DoNotReply@${DomainName}'
          Sha1Algorithm: !Ref Sha1Algorithm
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
      Layers:
        - !Ref DependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Events:
        GraphQLGET:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /graphql
            Method: get
        GraphQLOptions:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /graphql
            Method: options
        GraphQLPost:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /graphql
            Method: post

  apiLambdaFunctionRole:
    Type: AWS::IAM::Role
    DependsOn:
      - MongoDBReadWriteAccess
      - WebSocketAPIs
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ConfusedDeputyMitigation
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              # ArnLike:
              #   aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
          - Sid: MongoDBCrossAssume
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              # ArnLike:
              #   aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
      Path: /
      Policies:
        - PolicyName: allowLogoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}/Logos/*'
        - PolicyName: SQSCrossAccountAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Sub "arn:aws:sqs:*:${ProdAccountNumber}:${SMSQueueName}"
        - PolicyName: websocketPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'execute-api:ManageConnections'
                  - 'execute-api:Invoke'
                Resource:
                  - !Sub 'arn:aws:execute-api:*:${AWS::AccountId}:*'

              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - secretsmanager:ListSecrets
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource:
                  - "*"
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - lambda:InvokeFunction
              Effect: Allow
              Resource:
                - "*"
        - PolicyName: LambdaFunctionUpdatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - lambda:UpdateFunctionConfiguration
                - lambda:UpdateFunctionCode
              Effect: Allow
              Resource:
                - "*"
        - PolicyName: EC2-Describe-Permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                Resource: "*"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'


  CacheInvalidate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cacheInvalidate/invalidation.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 128
      Timeout: 30
      CodeUri: cacheInvalidate/
      Description: A Lambda function for cache invalidate
      Role: !GetAtt CacheInvalidateIamRole.Arn
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"

  CacheInvalidateIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cloud-saas-api-cacheInvalidateIamRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount:
                  - 377667345683
                  - 412239032805
                  - 807812734727
              ArnLike:
                aws:SourceArn:
                  - arn:aws:lambda:*:377667345683:function:*
                  - arn:aws:lambda:*:412239032805:function:*
                  - arn:aws:lambda:*:807812734727:function:*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        # Policy 1: cloudfrontCreateValidation
        - PolicyName: cloudfrontCreateValidationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'cloudfrontCreateValidation'
                Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: '*'

        # Policy 2: listCloudFrontDistribution
        - PolicyName: listCloudFrontDistributionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'listCloudFrontDistribution'
                Effect: Allow
                Action:
                  - cloudfront:ListDistributions
                Resource: '*'

        # Policy 3: clearCache
        - PolicyName: clearCachePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'clearCache'
                Effect: Allow
                Action:
                  - codepipeline:PutJobFailureResult
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:CreateInvalidation
                Resource: '*'

        # Policy 4: AssumeRole for QAAccount
        - PolicyName: AssumeRoleQAAccountPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'AssumeRoleQA'
                Effect: Allow
                Action: sts:AssumeRole
                Resource: arn:aws:iam::412239032805:role/pipelineRoleCrossAccount

        # Policy 5: AssumeRole for ProdAccount
        - PolicyName: AssumeRoleProdAccountPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'AssumeRoleProd'
                Effect: Allow
                Action: sts:AssumeRole
                Resource: arn:aws:iam::807812734727:role/pipelineRoleCrossAccount


  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CacheInvalidate
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${DomainName}

  S3InvokeLambdaPermissionMobile:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CacheInvalidate
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${DomainName}-mob

  S3InvokeLambdaPermissionApp:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CacheInvalidate
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${DomainName}-pwa

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"              
      Path: '/'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                Resource:
                  - !Sub arn:aws:s3:::${DomainName}
                  - !Sub arn:aws:s3:::${DomainName}/*

  publicAuthFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - MongoDBReadWriteAccess
      - TranslationHandler
    Properties:
      Handler: auth.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 29
      Role: !GetAtt apiLambdaFunctionRole.Arn
      CodeUri: publicAuth/
      Description: A Lambda function for the authentication
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          awsAccountNumber: !Ref AWS::AccountId
          translateLambdaFunction: !Ref TranslationHandler
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage] ]
          roleName: !Ref AssumeRoleSTS
          environment: !Ref Environment
          websocketApiId: !Ref WebSocketDomainName
          stage: !Ref Stage
          S3BucketTenantUploads: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}'
          S3BucketTenantUploadsConverted: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}-converted'
          senderEmail: !Sub 'DoNotReply@${DomainName}'
          clientDomain: !Sub '${DomainName}'
          domainName: !Ref DomainName
          jwtTokenExpiry: !Ref JwtTokenExpiry
          refreshTokenExpiry: !Ref RefreshTokenExpiry
          iotTokenExpiry: !Ref IotTokenExpiry
      Layers:
        - !Ref PublicAuthDependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
        - !Ref AWSSdkLayerV2
      Events:
        partnerApis:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /partner/{proxy+}
            Method: any
        getPrintJobOption:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /partner/{proxy+}
            Method: options
        publicApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /public/{proxy+}
            Method: any
        publicApiOption:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /public/{proxy+}
            Method: options

  PublicAuthDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer-authPublic
      Description: authPublic auth and other utility dependencies.
      ContentUri: publicAuth/dependencies/
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs20.x

  TranslationDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer-translation
      Description: translation and other utility dependencies.
      ContentUri: translationLayer/
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs20.x

  TranslationHandler:
    Type: AWS::Serverless::Function
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 512
      Timeout: 300
      Role: !GetAtt apiLambdaFunctionRole.Arn
      CodeUri: translation/
      Description: A Lambda function for the translation handling
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          awsAccountNumber: !Ref AWS::AccountId
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage ] ]
          roleName: !Ref AssumeRoleSTS
          environment: !Ref Environment
          stage: !Ref Stage
          S3BucketTenantUploads: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}'
          S3BucketTenantUploadsConverted: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}-converted'
          senderEmail: !Sub 'DoNotReply@${DomainName}'
          clientDomain: !Sub '${DomainName}'
          domainName: !Ref DomainName
      Layers:
        - !Ref TranslationDependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"

  LambdaDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer-lambda
      Description: lambda functions dependencies.
      ContentUri: lambdaDependencies/
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs20.x

  DeleteJobs:
    Type: AWS::Serverless::Function
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 60
      CodeUri: deleteJobs/
      Layers:
        - !Ref LambdaDependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Description: A Lambda function to delete the jobs
      Role: !GetAtt DeleteJobsLambdaRole.Arn
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          awsAccountNumber: !Ref AWS::AccountId
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage] ]
          S3BucketTenantUploads: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}'
          S3BucketTenantUploadsConverted: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}-converted'

  QuotaBalance:
    Type: AWS::Serverless::Function
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 360
      CodeUri: quotaBalance/
      Role: !GetAtt apiLambdaFunctionRole.Arn
      Layers:
        - !Ref LambdaDependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Description: A Lambda function to delete the jobs
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          awsAccountNumber: !Ref AWS::AccountId
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage] ]

  ScheduledRuleQuotaBalance:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 8 ? * * *)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "QuotaBalance"
              - "Arn"
          Id: "TargetFunctionV2"

  PermissionForEventsToInvokeQuotaBalance:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "QuotaBalance"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRuleQuotaBalance"
          - "Arn"

  DeleteJobsLambdaRole:
    Type: AWS::IAM::Role
    DependsOn: MongoDBReadWriteAccess
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"              
          - Sid: Statement2
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: s3Deletion
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:Put*
                  - s3:Get*
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}/PublicUploads/*'
                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}/PublicUploads'
                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}-converted/PublicUploads/*'
                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}-converted/PublicUploads'
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 hour)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "DeleteJobs"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeDeleteJobs:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "DeleteJobs"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - cloudfrontStack
      - MyApi
    Properties:
      DomainName: !Ref APIDomain
      RestApiId: !Ref MyApi
      Stage: !Ref MyApi.Stage

#  LambdaRoleHealthCheck:
#    Type: "AWS::IAM::Role"
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - 'sts:AssumeRole'
#      Path: "/"
#      ManagedPolicyArns:
#        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
#      Policies:
#        - PolicyName: s3
#          PolicyDocument:
#            Statement:
#              - Effect: Allow
#                Action:
#                  - s3:Get*
#                Resource:
#                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}/PublicUploads/*'
#                  - !Sub 'arn:aws:s3:::cloud-${BaseDomainName}-${RegionType}-${Stage}/PublicUploads'
#        - PolicyName: iotPolicy
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - iot:*
#                Resource: "*"

  AssumeRoleHealthCheck:
    Type: AWS::IAM::Role
    DependsOn: MongoDBReadWriteAccess
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
          - Sid: Statement2
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: tenantBucketInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - '*'
        - PolicyName: iotPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:*
                Resource: "*"
        - PolicyName: secretManagerRead
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:*
                Resource: "*"
        - PolicyName: lambda-read-envs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: "*"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  healthCheck:
    Type: AWS::Serverless::Function
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Handler: healthcheck/app.handler
      FunctionName: !Sub "cloud-saas-api-healthcheck-${AWS::Region}"
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 20
      CodeUri: healthcheck/
      Description: A Lambda function for healthcheck
      Role: !GetAtt AssumeRoleHealthCheck.Arn
      Environment:
        Variables:
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          functionName: !Sub "cloud-saas-api-healthcheck-${AWS::Region}"
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage] ]
          environment: !Ref Environment
          Stage: !Ref Stage
          status: 'ok'
          domainName: !Ref DomainName
          region: !Ref "AWS::Region"
          S3BucketTenantUploads: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}'
      Layers:
        - !Ref LambdaDependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Events:
        GetData:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /healthcheck
            Method: get

  ResendPrintJobs:
    Type: AWS::Serverless::Function
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt apiLambdaFunctionRole.Arn
      CodeUri: resendJobs/
      Description: A Lambda function for the resend print jobs
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          awsAccountNumber: !Ref AWS::AccountId
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage ] ]
          roleName: !Ref AssumeRoleSTS
          environment: !Ref Environment
          websocketApiId: !Ref WebSocketDomainName
          stage: 'Prod'
          S3BucketTenantUploads: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}'
          S3BucketTenantUploadsConverted: !Sub 'cloud-${BaseDomainName}-${RegionType}-${Stage}-converted'
          senderEmail: !Sub 'DoNotReply@${DomainName}'
          clientDomain: !Sub '${DomainName}'
          domainName: !Ref DomainName
          jwtTokenExpiry: !Ref JwtTokenExpiry
          refreshTokenExpiry: !Ref RefreshTokenExpiry
          iotTokenExpiry: !Ref IotTokenExpiry
      Layers:
        - !Ref LambdaDependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"

  ScheduledRuleResendJobs:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(10 minutes)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "ResendPrintJobs"
              - "Arn"
          Id: "TargetFunctionV2"

  PermissionForEventsToInvokeResendJobs:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "ResendPrintJobs"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRuleResendJobs"
          - "Arn"

  OfflineThingAlert:
    Type: AWS::Serverless::Function
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 512
      Timeout: 600
      Role: !GetAtt apiLambdaFunctionRole.Arn
      CodeUri: sendOfflineThingAlert/
      Layers:
        - !Ref LambdaDependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Description: A lambda function to log offline things into AuditLog
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          awsAccountNumber: !Ref AWS::AccountId
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage ] ]
          roleName: !Ref AssumeRoleSTS
          environment: !Ref Environment

  ScheduledRuleOfflineThingAlert:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 0/24 ? * * *)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "OfflineThingAlert"
              - "Arn"
          Id: "TargetFunctionV2"

  PermissionForEventsToInvokeOfflineThingAlert:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "OfflineThingAlert"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRuleOfflineThingAlert"
          - "Arn"

  RetryFailedTransaction:
    Type: AWS::Serverless::Function
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt apiLambdaFunctionRole.Arn
      CodeUri: handleFailedThirdPartyTransactions/
      Layers:
        - !Ref LambdaDependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Description: A lambda function to retry failed third part transaction
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          awsAccountNumber: !Ref AWS::AccountId
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage ] ]
          roleName: !Ref AssumeRoleSTS
          environment: !Ref Environment

  ScheduledRuleRetryFailedTransaction:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 0/24 ? * * *)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "RetryFailedTransaction"
              - "Arn"
          Id: "TargetFunctionV2"

  PermissionForEventsToInvokeRetryFailedTransaction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "RetryFailedTransaction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRuleRetryFailedTransaction"
          - "Arn"

  DashboardDataAggregator:
    Type: AWS::Serverless::Function
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 600
      Role: !GetAtt apiLambdaFunctionRole.Arn
      CodeUri: dashboardDataAggregator/
      Layers:
        - !Ref LambdaDependenciesLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Description: A lambda function to store last 28days aggregated usage data for all customers
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage ] ]
          environment: !Ref Environment

  ScheduledRuleDashboardDataAggregator:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 0/24 ? * * *)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "DashboardDataAggregator"
              - "Arn"
          Id: "TargetFunctionV2"

  DashboardDataAggregatorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "DashboardDataAggregator"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRuleDashboardDataAggregator"
          - "Arn"

  BasePathMappingWebsockets:
    DependsOn:
      - cloudfrontStack
      - WebSocketAPIs
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Sub 'wss.${DomainName}'
      ApiId: !GetAtt WebSocketAPIs.Outputs.WebSocketRefId
      Stage: Prod

  BasePathMappingSocketPartners:
    DependsOn:
      - cloudfrontStack
      - WebSocketAPIs
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Sub 'partner-wss.${DomainName}'
      ApiId: !GetAtt WebSocketAPIs.Outputs.WebSocketRefId
      Stage: Prod

    # Step 1: Create a new VPC
  VPCStaticIP:
    Type: AWS::EC2::VPC
    Properties:
       CidrBlock: 172.16.0.0/16

    # Step 2: Create 2 Subnets
  SubnetPublic:
     Type: AWS::EC2::Subnet
     Properties:
       AvailabilityZone: !Sub "${AWS::Region}b"
       CidrBlock: 172.16.1.0/24
       VpcId:
         Ref: VPCStaticIP

  SubnetPrivate:
     Type: AWS::EC2::Subnet
     Properties:
       AvailabilityZone: !Sub "${AWS::Region}b"
       CidrBlock: 172.16.2.0/24
       VpcId:
         Ref: VPCStaticIP

    # Step 3: Create an Internet Gateway
  InternetGateway:
     Type: AWS::EC2::InternetGateway
     Properties:
       Tags:
         - Key: Name
           Value: lambda-igw

    # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId:
          Ref: InternetGateway
        VpcId:
          Ref: VPCStaticIP

    # Step 4: Create a public Route Table and Assign it to our public route
  RouteTablePublic:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPCStaticIP

  RoutePublic:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
        RouteTableId:
          Ref: RouteTablePublic

  SubnetRouteTableAssociationPublic:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTablePublic
        SubnetId:
          Ref: SubnetPublic

    # Step 5: Create a NAT Gateway
    # Before creating NAT Gateway, we need to create Elastic IP with vpc scope
  EIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

  NatGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt: [EIP, AllocationId]
        SubnetId:
          Ref: SubnetPublic

    # In tutorial NAT Gateway is attached as default route 0.0.0.0/0 in main Route Table.
    # Main Route Table is created implicitely during VPC creation and CloudFormation
    # has no access to its ID. To overcome this limitation we create additional Route Table.
  RouteTablePrivate:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPCStaticIP

  RoutePrivate:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway
        RouteTableId:
          Ref: RouteTablePrivate

  SubnetRouteTableMainAssociationPrivate:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTablePrivate
        SubnetId:
          Ref: SubnetPrivate

  AuthLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: auth-dependencies
      Description: auth utility dependencies.
      ContentUri: orgAuth/dependencies/
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs20.x

  OrgAuthLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Lambda-specific SG with default-like rules"
      VpcId: !Ref VPCStaticIP
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  OrgAuthLambdaSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref OrgAuthLambdaSecurityGroup
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref OrgAuthLambdaSecurityGroup

  OrgAuthFunction:
    Type: AWS::Serverless::Function
    DependsOn: MongoDBReadWriteAccess
    Properties:
      Handler: app.handler
      Runtime: nodejs20.x
      Tracing: Active
      MemorySize: 256
      Timeout: 29
      CodeUri: orgAuth/
      Role: !GetAtt apiLambdaFunctionRole.Arn
      Description: A Lambda function for the authentication
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt: [VPCStaticIP, DefaultSecurityGroup]
          - !Ref OrgAuthLambdaSecurityGroup
        SubnetIds:
          - Ref: SubnetPrivate
      Environment:
        Variables:
          region: !Ref "AWS::Region"
          mongoDBConnection: !Ref MongoDBConnection
          MongoDBReadWriteAccess: !Sub 'arn:aws:iam::${AWS::AccountId}:role/MongoDBReadWriteAccess'
          awsAccountNumber: !Ref AWS::AccountId
          dbName: !Join [ "",[ !Ref DatabaseName, "-",!Ref Stage] ]
          environment: !Ref Environment
          Stage: !Ref Stage
          domainName: !Ref DomainName
          jwtTokenExpiry: !Ref JwtTokenExpiry
          refreshTokenExpiry: !Ref RefreshTokenExpiry
          iotTokenExpiry: !Ref IotTokenExpiry
      Layers:
        - !Ref AuthLambdaLayer
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Events:
        orgApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /auth/{proxy+}
            Method: any
        orgApiOption:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /auth/{proxy+}
            Method: options

  logoHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.11
      Tracing: Active
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt apiLambdaFunctionRole.Arn
      CodeUri: logoHandler/
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
      Events:
        loadImage:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /logo/{source}
            Method: get

